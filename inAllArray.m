//------------------------------------------------------------------------------
// <wsdl2code-generated>
// This code was generated by http://www.wsdl2code.com iPhone version 2.0
// Date Of Creation: 8/27/2014 3:43:10 PM
//
//  Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code Version
//

#import "inAllArray.h" 


@implementation inAllArray

-(id)initWithArray:(NSArray*)array {
    self = [super init];
    if (self) {
        @try {
            for (int i0 = 0; i0 < [array count]; i0++)
            {
                if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"user"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setUser:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeContent"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"pass"]==NSOrderedSame)){
                    NSString* nodeContentValue = [[NSString alloc] initWithString:[[array objectAtIndex:i0] objectForKey:@"nodeContent"]];
                    if (nodeContentValue !=nil)
                        [self setPass:nodeContentValue];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeChildArray"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"categoriesArray"]==NSOrderedSame)){
                    NSArray* array1= [[array objectAtIndex:i0] objectForKey:@"nodeChildArray"];
                    NSMutableArray* dataArray1= [[NSMutableArray alloc]init];
                    for (int i1=0; i1<[array1 count];i1++)
                    {
                        NSArray* arrayXml = [[array1  objectAtIndex:i1] objectForKey:@"nodeChildArray"];
                        CategoryObj* item = [[CategoryObj alloc] initWithArray:arrayXml];
                        [dataArray1  addObject:item];
                    }
                    [self setCategoriesArray:dataArray1];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeChildArray"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"itemsArray"]==NSOrderedSame)){
                    NSArray* array1= [[array objectAtIndex:i0] objectForKey:@"nodeChildArray"];
                    NSMutableArray* dataArray1= [[NSMutableArray alloc]init];
                    for (int i1=0; i1<[array1 count];i1++)
                    {
                        NSArray* arrayXml = [[array1  objectAtIndex:i1] objectForKey:@"nodeChildArray"];
                        ItemObj* item = [[ItemObj alloc] initWithArray:arrayXml];
                        [dataArray1  addObject:item];
                    }
                    [self setItemsArray:dataArray1];
                }
                else if ( ([[array objectAtIndex:i0] objectForKey:@"nodeChildArray"] !=nil) &&  ([[[array objectAtIndex:i0]objectForKey:@"nodeName"]caseInsensitiveCompare:@"filesArray"]==NSOrderedSame)){
                    NSArray* array1= [[array objectAtIndex:i0] objectForKey:@"nodeChildArray"];
                    NSMutableArray* dataArray1= [[NSMutableArray alloc]init];
                    for (int i1=0; i1<[array1 count];i1++)
                    {
                        NSArray* arrayXml = [[array1  objectAtIndex:i1] objectForKey:@"nodeChildArray"];
                        FileObj* item = [[FileObj alloc] initWithArray:arrayXml];
                        [dataArray1  addObject:item];
                    }
                    [self setFilesArray:dataArray1];
                }
            }
        }
        @catch(NSException *ex){
        }
    }
    return self;
}
-(NSString*)toString:(BOOL)addNameWrap {
    NSMutableString *nsString = [NSMutableString string];
    if (addNameWrap == YES)
        [nsString appendString:@"<inAllArray>" ];
    if (self.user != nil) {
        [nsString appendFormat:@"<user>%@</user>" , [self user]];
    }
    if (self.pass != nil) {
        [nsString appendFormat:@"<pass>%@</pass>" , [self pass]];
    }
    if (self.categoriesArray != nil) {
        [nsString appendFormat:@"<categoriesArray>"];
        for(CategoryObj *elm in self.categoriesArray){
            [nsString appendFormat:@"%@", [elm toString:YES]];
        }
        [nsString appendFormat:@"</categoriesArray>"];
    }
    if (self.itemsArray != nil) {
        [nsString appendFormat:@"<itemsArray>"];
        for(ItemObj *elm in self.itemsArray){
            [nsString appendFormat:@"%@", [elm toString:YES]];
        }
        [nsString appendFormat:@"</itemsArray>"];
    }
    if (self.filesArray != nil) {
        [nsString appendFormat:@"<filesArray>"];
        for(FileObj *elm in self.filesArray){
            [nsString appendFormat:@"%@", [elm toString:YES]];
        }
        [nsString appendFormat:@"</filesArray>"];
    }
    if (addNameWrap == YES)
        [nsString appendString:@"</inAllArray>" ];
    return nsString;
}
#pragma mark - NSCoding
-(id)initWithCoder:(NSCoder *)decoder{
    self = [super init];
    if (self){
        self.user = [decoder decodeObjectForKey:@"user"];
        self.pass = [decoder decodeObjectForKey:@"pass"];
        self.categoriesArray = [decoder decodeObjectForKey:@"categoriesArray"];
        self.itemsArray = [decoder decodeObjectForKey:@"itemsArray"];
        self.filesArray = [decoder decodeObjectForKey:@"filesArray"];
    }
    return self;
}
-(void)encodeWithCoder:(NSCoder *)encoder{
    [encoder encodeObject:self.user forKey:@"user"];
    [encoder encodeObject:self.pass forKey:@"pass"];
    [encoder encodeObject:self.categoriesArray forKey:@"categoriesArray"];
    [encoder encodeObject:self.itemsArray forKey:@"itemsArray"];
    [encoder encodeObject:self.filesArray forKey:@"filesArray"];
}
-(id)copyWithZone:(NSZone *)zone {
    inAllArray *finalCopy = [[[self class] allocWithZone: zone] init];
    
    NSString *copy1 = [self.user copy];
    finalCopy.user = copy1;
    
    NSString *copy2 = [self.pass copy];
    finalCopy.pass = copy2;
    
    NSMutableArray *cpy3 = [self.categoriesArray copy];
    finalCopy.categoriesArray = cpy3;
    
    NSMutableArray *cpy4 = [self.itemsArray copy];
    finalCopy.itemsArray = cpy4;
    
    NSMutableArray *cpy5 = [self.filesArray copy];
    finalCopy.filesArray = cpy5;
    
    return finalCopy;
}

@end
